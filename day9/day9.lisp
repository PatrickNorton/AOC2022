(defvar adjustments
  '((U . (0 . 1))
    (D . (0 . -1))
    (R . (1 . 0))
    (L . (-1 . 0))))

(defun add-conses (a b)
  (cons (+ (car a) (car b)) (+ (cdr a) (cdr b))))

(defun adjacentp (a b)
  (and (<= (abs (- (car a) (car b))) 1)
       (<= (abs (- (cdr a) (cdr b))) 1)))

(defun adjust-tail (current-pos tail-pos)
  (let ((new-pos (copy-tree tail-pos)))
    (when (>= (abs (- (car current-pos) (car new-pos))) 1)
      (let* ((distance (- (car current-pos) (car new-pos)))
             (step (/ distance (abs distance))))
        (incf (car new-pos) step)))
    (when (>= (abs (- (cdr current-pos) (cdr new-pos))) 1)
      (let* ((distance (- (cdr current-pos) (cdr new-pos)))
             (step (/ distance (abs distance))))
        (incf (cdr new-pos) step)))
    new-pos))

(defun adjust-pos (current-pos tail-pos direction distance visited)
  (dotimes (_ distance)
    (setf current-pos (add-conses current-pos (cdr (assoc direction adjustments))))
    (unless (adjacentp current-pos tail-pos)
      (setf tail-pos (adjust-tail current-pos tail-pos))
      (setf (gethash (copy-tree tail-pos) visited) t)))
  (list current-pos tail-pos))

(defun part-1 ()
  (with-open-file (file "input.txt")
    (loop for line = (read-line file nil)
          while line
          with head-pos = (cons 0 0)
          and tail-pos = (cons 0 0)
          and visited = (make-hash-table :test 'equal)
          initially (setf (gethash '(0 . 0) visited) t)
          for (dir dist) = (read-from-string (concatenate 'string "(" line ")"))
          for (new-head new-tail) = (adjust-pos head-pos tail-pos dir dist visited)
          do (setf head-pos new-head
                   tail-pos new-tail)
          finally (return (hash-table-count visited)))))

(defun adjust-snake (snake direction distance visited)
  (let ((cur-snake snake))
    (dotimes (_ distance)
      (let ((new-snake (make-array (length cur-snake))))
        (loop for val across cur-snake
              for i from 0
              if (zerop i)
                do (setf (aref new-snake i)
                         (add-conses (aref cur-snake i)
                                     (cdr (assoc direction adjustments))))
              else
                do (if (adjacentp (aref new-snake (1- i))
                                  (aref cur-snake i))
                       (setf (aref new-snake i) (aref cur-snake i))
                       (setf (aref new-snake i)
                             (adjust-tail (aref new-snake (1- i))
                                          (aref cur-snake i))))
              when (= i 9)
                do (setf (gethash (copy-tree (aref new-snake i)) visited) t))
        (setf cur-snake new-snake)))
    cur-snake))

(defun part-2 ()
  (with-open-file (file "input.txt")
    (loop for line = (read-line file nil)
          while line
          with snake = (make-array 10 :initial-element '(0 . 0))
          and visited = (make-hash-table :test 'equal)
          initially (setf (gethash '(0 . 0) visited) t)
          for (dir dist) = (read-from-string (concatenate 'string "(" line ")"))
          do (setf snake (adjust-snake snake dir dist visited))
          finally (return (hash-table-count visited)))))
